
global arguments=""
global injections
global injection
global syscall_args

probe begin
{
    //printf("START\n")
    injectionsStr = @1
    tokenSyscall = tokenize(injectionsStr, ";")
    i = 1
    for (k = 1; k < 9; k++)
    {
        injection[k] = ""
    }
    while (tokenSyscall != "")
    {
        startS = strlen(tokenSyscall) + 1
        stopS = strlen(injectionsStr)
        injectionsStr = substr(injectionsStr, startS, stopS)
        
        tokenParam = tokenize(tokenSyscall, ",")
        //printf("param %s\n", tokenParam)
        j = 1
        separatorLength = 1
        strlenParam = strlen(tokenParam)
        while (strlenParam != 0)
        {
            startP = strlenParam + separatorLength
            stopP = strlen(tokenSyscall)
            tokenSyscall = substr(tokenSyscall, startP, stopP)
            
            injection[j] = tokenParam
            j++
            
            //////////////////////////////
            if (substr(tokenSyscall, 0, 2) == "\'\'")
            {
                tokenParam = ""
                separatorLength = 2
                strlenParam = 1 // aby neskoncilo delani na tokeny
            }
            else if (substr(tokenSyscall, 0, 1) == "\'")
            {
                tokenParam = tokenize(tokenSyscall, "\'")
                syscallsStrHelp = tokenSyscall
                while (substr(tokenParam, strlen(tokenParam) - 1, 1) == "\\")
                {
                    stop = strlen(syscallsStrHelp)
                    start = strlen(tokenParam) + 2
                    syscallsStrHelp = substr(syscallsStrHelp, start, stop)
                    tokenParam = tokenParam."\'".tokenize(syscallsStrHelp, "\'")
                }
                separatorLength = 3
                strlenParam = strlen(tokenParam)
            }
            else
            {
                tokenParam = tokenize(tokenSyscall, ",")
                separatorLength = 1
                strlenParam = strlen(tokenParam)
            }
            
            ///////////////////////////////
            
            //tokenParam = tokenize(tokenSyscall, ",")
            //printf("param %s\n", tokenParam)
        }
        
        injections[injection[1], injection[3], injection[4], injection[5], injection[6], injection[7], injection[8]] = injection[2]
        for (k = 1; k < 9; k++)
        {
            injection[k] = ""
        }
        i++
        tokenSyscall = tokenize(injectionsStr, ";")
    }
}


probe syscall.mkdirat
{
    if (pid() == target())
    {
        arguments = argstr
        t = tokenize(arguments, ", ")
        separatorLength = 0
        if (substr(arguments, 0, 1) == "\"")
        {
            t = tokenize(arguments, "\"")
            argumentsHelp = arguments
            while (substr(t, strlen(t) - 1, 1) == "\\")
            {
                stop = strlen(argumentsHelp)
                start = strlen(t) + 1
                argumentsHelp = substr(argumentsHelp, start, stop)
                t = t."\"".tokenize(argumentsHelp, "\"")
            }
            separatorLength = 3
        }
        else
        {
            t = tokenize(arguments, ", ")
            separatorLength = 2
        }
        for (j = 1; j < 7; j++)
            syscall_args[j] = ""
        i = 1
        while (t != "")
        {
            stop = strlen(arguments)
            start = strlen(t) + separatorLength
            arguments = substr(arguments, start, stop)
            //printf("\t%s\n", t)
            syscall_args[i] = t
            i++
            if (substr(arguments, 0, 1) == "\"")
            {
                t = tokenize(arguments, "\"")
                argumentsHelp = arguments
                while (substr(t, strlen(t) - 1, 1) == "\\")
                {
                    stop = strlen(argumentsHelp)
                    start = strlen(t) + 1
                    argumentsHelp = substr(argumentsHelp, start, stop)
                    t = t."\"".tokenize(argumentsHelp, "\"")
                }
                separatorLength = 3
            }
            else
            {
                t = tokenize(arguments, ", ")
                separatorLength = 2
            }
        }
    }
}


function cmpArgs(arg1:string, arg2:string)
{
    if (arg1 == "")
        return 1
    else if (arg1 == arg2)
        return 1
    else
        return 0
}


probe syscall.mkdirat.return
{
    if (pid() == target())
    {
        foreach ([injection0, injection1, injection2, injection3, injection4, injection5, injection6] in injections)
        {
            /*printf("%s, %s\n", injection0, name)
            printf("%s, %s\n", injection1, syscall_args[1])
            printf("%s, %s\n", injection2, syscall_args[2])
            printf("%s, %s\n", injection3, syscall_args[3])
            printf("%s, %s\n", injection4, syscall_args[4])
            printf("%s, %s\n", injection5, syscall_args[5])
            printf("%s, %s\n", injection6, syscall_args[6])*/
            if (injection0 != name)
            {
                //printf("NEROVNO 0\n")
                continue
            }
            else if (cmpArgs(injection1, syscall_args[1]) != 1)
            {
                //printf("NEROVNO 1\n")
                continue
            }
            else if (cmpArgs(injection2, syscall_args[2]) != 1)
            {
                //printf("NEROVNO 2\n")
                continue
            }
            else if (cmpArgs(injection3, syscall_args[3]) != 1)
            {
                //printf("NEROVNO 3\n")
                continue
            }
            else if (cmpArgs(injection4, syscall_args[4]) != 1)
            {
                //printf("NEROVNO 4\n")
                continue
            }
            else if (cmpArgs(injection5, syscall_args[5]) != 1)
            {
                //printf("NEROVNO 5\n")
                continue
            }
            else if (cmpArgs(injection6, syscall_args[6]) != 1)
            {
                //printf("NEROVNO 6\n")
                continue
            }
            
            //printf("Return value %d\n", -strtol(injections[injection0, injection1, injection2, injection3, injection4, injection5, injection6], 10))
            $return = -strtol(injections[injection0, injection1, injection2, injection3, injection4, injection5, injection6], 10)
        }
        
        //if ($return >= 0)
        //    errno = 0
        //else
        //    errno = $return
        //printf("%s (%s) = %d %s\n", name, arguments, $return, errno_str(errno))
        arguments=""
    }
}

